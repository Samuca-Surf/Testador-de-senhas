import javax.swing.*;
import java.io.*;
import java.nio.file.*;
import java.util.*;

public class TestadorNextGen {
    private static String senhaCadastrada = null;
    private static File arquivoWordlist = null;

    public static void main(String[] args) {
        while (true) {
            String[] opcoes = {"Cadastrar Senha", "Escolher Wordlist", "Testar Senha", "Sair"};
            int escolha = JOptionPane.showOptionDialog(
                null,
                "Testador de Senhas - Escolha uma op√ß√£o:\n" +
                (arquivoWordlist != null ? "Wordlist atual: " + arquivoWordlist.getName() : "Nenhuma wordlist selecionada"),
                "Menu Principal",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,
                opcoes,
                opcoes[0]
            );

            switch (escolha) {
                case 0:
                    cadastrarSenha();
                    break;
                case 1:
                    escolherWordlist();
                    break;
                case 2:
                    testarSenha();
                    break;
                case 3:
                case -1:
                    JOptionPane.showMessageDialog(null, "Programa encerrado!");
                    System.exit(0);
                    break;
            }
        }
    }

    private static void cadastrarSenha() {
        senhaCadastrada = JOptionPane.showInputDialog(
            null,
            "Digite a senha a ser testada:",
            "Cadastrar Senha",
            JOptionPane.QUESTION_MESSAGE
        );

        if (senhaCadastrada == null) return;

        if (senhaCadastrada.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Senha n√£o pode estar vazia!", "Erro", JOptionPane.ERROR_MESSAGE);
            senhaCadastrada = null;
        } else {
            JOptionPane.showMessageDialog(null, "Senha cadastrada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private static void escolherWordlist() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Escolha o arquivo de wordlist");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        // Filtrar para mostrar apenas arquivos de texto (opcional)
        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(File f) {
                return f.isDirectory() || 
                       f.getName().toLowerCase().endsWith(".txt") ||
                       f.getName().toLowerCase().endsWith(".lst");
            }
            
            public String getDescription() {
                return "Arquivos de texto (*.txt, *.lst)";
            }
        });

        int resultado = fileChooser.showOpenDialog(null);
        
        if (resultado == JFileChooser.APPROVE_OPTION) {
            arquivoWordlist = fileChooser.getSelectedFile();
            
            // Verificar se o arquivo existe e √© leg√≠vel
            if (!arquivoWordlist.exists() || !arquivoWordlist.canRead()) {
                JOptionPane.showMessageDialog(null, 
                    "N√£o foi poss√≠vel ler o arquivo selecionado!", 
                    "Erro", JOptionPane.ERROR_MESSAGE);
                arquivoWordlist = null;
            } else {
                // Mostrar informa√ß√µes b√°sicas do arquivo
                long tamanho = arquivoWordlist.length();
                String tamanhoFormatado = formatarTamanho(tamanho);
                
                JOptionPane.showMessageDialog(null, 
                    "Wordlist selecionada com sucesso!\n" +
                    "Arquivo: " + arquivoWordlist.getName() + "\n" +
                    "Tamanho: " + tamanhoFormatado + "\n" +
                    "Local: " + arquivoWordlist.getParent(),
                    "Wordlist Carregada", 
                    JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    private static String formatarTamanho(long bytes) {
        if (bytes < 1024) return bytes + " B";
        if (bytes < 1024 * 1024) return String.format("%.1f KB", bytes / 1024.0);
        if (bytes < 1024 * 1024 * 1024) return String.format("%.1f MB", bytes / (1024.0 * 1024.0));
        return String.format("%.1f GB", bytes / (1024.0 * 1024.0 * 1024.0));
    }

    private static void testarSenha() {
        if (senhaCadastrada == null) {
            JOptionPane.showMessageDialog(null, 
                "Nenhuma senha cadastrada! Por favor, cadastre uma senha primeiro.",
                "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (arquivoWordlist == null) {
            JOptionPane.showMessageDialog(null, 
                "Nenhuma wordlist selecionada! Por favor, escolha um arquivo de wordlist.",
                "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Di√°logo de confirma√ß√£o para arquivos muito grandes
        long tamanhoLimite = 100 * 1024 * 1024; // 100MB
        if (arquivoWordlist.length() > tamanhoLimite) {
            String tamanho = formatarTamanho(arquivoWordlist.length());
            int confirm = JOptionPane.showConfirmDialog(null,
                "A wordlist selecionada √© muito grande (" + tamanho + ").\n" +
                "O teste pode demorar v√°rios minutos e consumir muita mem√≥ria.\n\n" +
                "Deseja continuar mesmo assim?",
                "Wordlist Grande",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
                
            if (confirm != JOptionPane.YES_OPTION) {
                return;
            }
        }

        // Mostrar di√°logo de progresso
        JOptionPane.showMessageDialog(null,
            "Iniciando teste de senha...\n" +
            "Arquivo: " + arquivoWordlist.getName() + "\n" +
            "Tamanho: " + formatarTamanho(arquivoWordlist.length()) + "\n" +
            "Isso pode demorar dependendo do tamanho do arquivo.",
            "Testando Senha",
            JOptionPane.INFORMATION_MESSAGE);

        try {
            String resultado = buscarSenhaNoArquivo();
            JOptionPane.showMessageDialog(null, resultado, "Resultado do Teste", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null,
                "Erro ao ler o arquivo: " + e.getMessage() + "\n" +
                "Verifique se o arquivo n√£o est√° corrompido e tente novamente.",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private static String buscarSenhaNoArquivo() throws IOException {
        int linhaAtual = 0;
        int senhasEncontradas = 0;
        List<String> senhasIguais = new ArrayList<>();
        long inicio = System.currentTimeMillis();

        try (BufferedReader reader = Files.newBufferedReader(arquivoWordlist.toPath())) {
            String linha;
            
            while ((linha = reader.readLine()) != null) {
                linhaAtual++;
                
                if (!linha.trim().isEmpty() && linha.equals(senhaCadastrada)) {
                    senhasEncontradas++;
                    senhasIguais.add("Linha " + linhaAtual + ": " + linha);
                }
                
                // Mostrar progresso a cada 50.000 linhas para n√£o sobrecarregar
                if (linhaAtual % 50000 == 0) {
                    System.out.println("Processadas " + linhaAtual + " linhas...");
                }
            }
        }

        long tempoExecucao = System.currentTimeMillis() - inicio;
        return construirResultado(linhaAtual, senhasEncontradas, senhasIguais, tempoExecucao);
    }

    private static String construirResultado(int totalLinhas, int encontradas, List<String> ocorrencias, long tempoMs) {
        StringBuilder resultado = new StringBuilder();
        resultado.append("‚ïê".repeat(50)).append("\n");
        resultado.append("RESULTADO DO TESTE DE SENHA\n");
        resultado.append("‚ïê".repeat(50)).append("\n");
        resultado.append("Arquivo testado: ").append(arquivoWordlist.getName()).append("\n");
        resultado.append("Senha testada: ").append(senhaCadastrada).append("\n");
        resultado.append("Tempo de execu√ß√£o: ").append(tempoMs / 1000.0).append(" segundos\n");
        resultado.append("Total de linhas processadas: ").append(String.format("%,d", totalLinhas)).append("\n");
        resultado.append("Ocorr√™ncias encontradas: ").append(encontradas).append("\n\n");

        if (encontradas > 0) {
            resultado.append("üö® ATEN√á√ÉO: SENHA ENCONTRADA NA WORDLIST!\n");
            resultado.append("Esta senha √© fraca/comum e deve ser alterada!\n\n");
            resultado.append("Ocorr√™ncias encontradas:\n");
            for (String ocorrencia : ocorrencias) {
                resultado.append("‚Ä¢ ").append(ocorrencia).append("\n");
            }
            resultado.append("\nüîí RECOMENDA√á√ÉO: Use uma senha mais forte e √∫nica!");
        } else {
            resultado.append("‚úÖ Senha n√£o encontrada na wordlist\n");
            resultado.append("Isso √© um bom sinal de seguran√ßa.\n\n");
            resultado.append("üí° Dicas para senhas seguras:\n");
            resultado.append("‚Ä¢ Use pelo menos 12 caracteres\n");
            resultado.append("‚Ä¢ Combine letras, n√∫meros e s√≠mbolos\n");
            resultado.append("‚Ä¢ Evite palavras do dicion√°rio\n");
            resultado.append("‚Ä¢ N√£o reuse senhas entre servi√ßos");
        }

        return resultado.toString();
    }
}